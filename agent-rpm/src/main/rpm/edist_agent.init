#!/bin/sh
### BEGIN INIT INFO
# Provides:          edist_agent
# Required-Start:    $syslog $remote_fs
# Should-Start:      $time ypbind smtp puppet
# Required-Stop:     $syslog $remote_fs
# Should-Stop:       ypbind smtp puppet
# Default-Start:     3 5
# Default-Stop:      0 1 2 6
# Short-Description: edist_agent XYZ daemon providing ZYX
# Description:       Start edist_agent to allow XY and provide YZ
#	continued on second line by '#<TAB>'
#	should contain enough info for the runlevel editor
#	to give admin some idea what this service does and
#	what it's needed for ...
#	(The Short-Description should already be a good hint.)
### END INIT INFO

. /etc/rc.status

# Reset status of this service
rc_reset

BEAMEXE=$(rpm -ql erlang | grep beam.smp)
PIDFILE=/var/run/edist_agent.pid

case "$1" in
    start)
	echo -n "Starting edist_agent daemon"
	## Start daemon with startproc(8). If this fails
	## the return value is set appropriately by startproc.

	sudo -u edist -i %DAEMON%

	# Remember status and be verbose
	rc_status -v
	;;
    stop)
	echo -n "Shutting down edist_agent "
	/sbin/killproc -p $PIDFILE $BEAMEXE

	# Remember status and be verbose
	rc_status -v
	;;
    try-restart|condrestart)
	## Do a restart only if the service was active before.
	## Note: try-restart is now part of LSB (as of 1.9).
	## RH has a similar command named condrestart.
	if test "$1" = "condrestart"; then
		echo "${attn} Use try-restart ${done}(LSB)${attn} rather than condrestart ${warn}(RH)${norm}"
	fi
	$0 status
	if test $? = 0; then
		$0 restart
	else
		rc_reset	# Not running is not a failure.
	fi
	# Remember status and be quiet
	rc_status
	;;
    restart)
	## Stop the service and regardless of whether it was
	## running or not, start it again.
	$0 stop
	$0 start

	# Remember status and be quiet
	rc_status
	;;
    force-reload)
	$0 try-restart
	rc_status
	;;
    reload)
	## does not support reload:
	rc_failed 3
	rc_status -v
	;;
    status)
	echo -n "Checking for service edist_agent "
	## Check status with checkproc(8), if process is running
	## checkproc will return with exit status 0.

	# Return value is slightly different for the status command:
	# 0 - service up and running
	# 1 - service dead, but /var/run/  pid  file exists
	# 2 - service dead, but /var/lock/ lock file exists
	# 3 - service not running (unused)
	# 4 - service status unknown :-(
	# 5--199 reserved (5--99 LSB, 100--149 distro, 150--199 appl.)

	# NOTE: checkproc returns LSB compliant status values.
	/sbin/checkproc -p $PIDFILE $BEAMEXE
	# NOTE: rc_status knows that we called this init script with
	# "status" option and adapts its messages accordingly.
	rc_status -v
	;;
    *)
	echo "Usage: $0 {start|stop|status|try-restart|restart|force-reload|reload|probe}"
	exit 1
	;;
esac
rc_exit
